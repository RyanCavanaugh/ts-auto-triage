{
  "id": 1001,
  "number": 1001,
  "title": "Compiler incorrectly allows spreading readonly arrays into mutable arrays",
  "body": "When using the spread operator with readonly arrays, TypeScript should prevent spreading into a mutable array but it doesn't.\n\n```typescript\nconst readonlyArr: readonly number[] = [1, 2, 3];\nconst mutableArr: number[] = [...readonlyArr]; // Should error but doesn't\nmutableArr.push(4); // This modifies what should be readonly\n```\n\nExpected: TypeScript should report an error when spreading readonly into mutable\nActual: No error is reported\n\nTypeScript Version: 5.3.0",
  "user": {
    "login": "testuser",
    "id": 1,
    "type": "User"
  },
  "state": "open",
  "state_reason": null,
  "labels": [],
  "milestone": null,
  "assignees": [],
  "created_at": "2024-01-01T00:00:00Z",
  "updated_at": "2024-01-01T00:00:00Z",
  "closed_at": null,
  "author_association": "NONE",
  "reactions": {},
  "comments": [
    {
      "id": 1,
      "body": "This is a known limitation of TypeScript's type system. The spread operator creates a new array, so readonly is not preserved.",
      "user": {
        "login": "maintainer",
        "id": 2,
        "type": "User"
      },
      "created_at": "2024-01-02T00:00:00Z",
      "updated_at": "2024-01-02T00:00:00Z",
      "author_association": "MEMBER",
      "reactions": {}
    }
  ],
  "is_pull_request": false
}
