#!/usr/bin/env node

import { createCLIOptions, parseIssueRef, handleError } from './utils.js';
import { promises as fs } from 'fs';
import path from 'path';

async function main() {
  const options = createCLIOptions();
  const { logger, workingDir, ai } = options;

  try {
    const args = process.argv.slice(2);
    
    if (args.length === 0) {
      throw new Error('Issue reference required. Usage: first-response Microsoft/TypeScript#9998');
    }

    const issueRef = parseIssueRef(args[0]!);

    logger.info(`Generating first response for ${issueRef.owner}/${issueRef.repo}#${issueRef.number}`);
    
    // Ensure working directories exist
    await fs.mkdir(path.join(workingDir, 'outputs'), { recursive: true });
    
    // For demonstration, create a basic first response
    logger.info('Generating AI-powered first response...');

    // Load FAQ content
    const faqPath = path.join(process.cwd(), 'FAQ.md');
    let faqContent: string;
    try {
      faqContent = await fs.readFile(faqPath, 'utf-8');
    } catch (error) {
      logger.warn('FAQ.md not found, using empty FAQ');
      faqContent = '';
    }

    const messages = [
      {
        role: 'system' as const,
        content: `You are a helpful assistant for a TypeScript repository. Provide a welcoming first response to new issues.

Available FAQ content:
${faqContent}

Generate a helpful, welcoming response that:
1. Thanks the user for reporting the issue
2. Checks if it matches any FAQ entries
3. Asks for clarification if needed
4. Provides initial guidance`
      },
      {
        role: 'user' as const,
        content: `Please provide a first response for issue #${issueRef.number} in ${issueRef.owner}/${issueRef.repo}.`
      }
    ];

    const response = await ai.generateChatCompletion(messages, {
      temperature: 0.3,
      maxTokens: 1000
    });

    // Save response to outputs directory
    const outputFile = path.join(workingDir, 'outputs', `first-response-${issueRef.owner}-${issueRef.repo}-${issueRef.number}.md`);
    const outputContent = `# First Response for ${issueRef.owner}/${issueRef.repo}#${issueRef.number}

**Generated Response:**

${response.content}

---
*Generated by TypeScript Auto-Triage Tool*
`;

    await fs.writeFile(outputFile, outputContent);
    logger.info(`First response saved to ${outputFile}`);

    // Also create a JSON summary
    const summaryFile = path.join(workingDir, 'outputs', `first-response-${issueRef.owner}-${issueRef.repo}-${issueRef.number}.json`);
    const summary = {
      issue: {
        owner: issueRef.owner,
        repo: issueRef.repo,
        number: issueRef.number,
        url: `https://github.com/${issueRef.owner}/${issueRef.repo}/issues/${issueRef.number}`
      },
      response: response.content,
      timestamp: new Date().toISOString(),
      usage: response.usage
    };

    await fs.writeFile(summaryFile, JSON.stringify(summary, null, 2));
    logger.info(`Summary saved to ${summaryFile}`);

  } catch (error) {
    handleError(error as Error, logger);
  }
}

main();